{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red199\green221\blue12;\red216\green216\blue216;\red255\green198\blue0;
\red210\green82\blue82;\red190\green214\blue255;\red127\green179\blue71;\red121\green171\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c78039\c86667\c4706;\csgenericrgb\c84706\c84706\c84706;\csgenericrgb\c100000\c77647\c0;
\csgenericrgb\c82353\c32157\c32157;\csgenericrgb\c74510\c83922\c100000;\csgenericrgb\c49804\c70196\c27843;\csgenericrgb\c47451\c67059\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 /******************************************************************************\cf0 \
\
\cf2  @file main.c\cf0 \
\
\cf2  @brief main entry of the example application\cf0 \
\
\cf2  Group: WCS LPC\cf0 \
\cf2  Target Device: cc13xx_cc26xx\cf0 \
\
\cf2  ******************************************************************************\cf0 \
\cf2  \cf0 \
\cf2  Copyright (c) 2016-2022, Texas Instruments Incorporated\cf0 \
\cf2  All rights reserved.\cf0 \
\
\cf2  Redistribution and use in source and binary forms, with or without\cf0 \
\cf2  modification, are permitted provided that the following conditions\cf0 \
\cf2  are met:\cf0 \
\
\cf2  *  Redistributions of source code must retain the above copyright\cf0 \
\cf2     notice, this list of conditions and the following disclaimer.\cf0 \
\
\cf2  *  Redistributions in binary form must reproduce the above copyright\cf0 \
\cf2     notice, this list of conditions and the following disclaimer in the\cf0 \
\cf2     documentation and/or other materials provided with the distribution.\cf0 \
\
\cf2  *  Neither the name of Texas Instruments Incorporated nor the names of\cf0 \
\cf2     its contributors may be used to endorse or promote products derived\cf0 \
\cf2     from this software without specific prior written permission.\cf0 \
\
\cf2  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\cf0 \
\cf2  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\cf0 \
\cf2  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\cf0 \
\cf2  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\cf0 \
\cf2  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\cf0 \
\cf2  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\cf0 \
\cf2  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\cf0 \
\cf2  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\cf0 \
\cf2  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\cf0 \
\cf2  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\cf0 \
\cf2  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\cf0 \
\
\cf2  ******************************************************************************\cf0 \
\cf2  \cf0 \
\cf2  \cf0 \
\cf2  *****************************************************************************/\cf0 \
\
\cf2 /******************************************************************************\cf0 \
\cf2  Includes\cf0 \
\cf2  *****************************************************************************/\cf0 \
\
\cf2 /* RTOS header files */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifndef
\f0\b0 \cf3  FREERTOS_SUPPORT\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ti/sysbios/BIOS.h>\cf0 \

\f1\b \cf1 #else
\f0\b0 \cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <FreeRTOS.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <task.h>\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <pthread.h>\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ioc.h>\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "sys_ctrl.h"\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "ti_drivers_config.h"\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <inc/hw_ccfg.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <inc/hw_ccfg_simple_struct.h>\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /* Header files required for the temporary idle task function */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ti/drivers/Power.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ti/drivers/power/PowerCC26XX.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ti/drivers/GPIO.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <aon_rtc.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <prcm.h>\cf0 \
\

\f1\b \cf1 #if
\f0\b0 \cf3  (defined(FEATURE_BLE_OAD) || defined(FEATURE_NATIVE_OAD)) && !defined(OAD_ONCHIP)\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ti/drivers/SPI.h>\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #if
\f0\b0 \cf3  defined(FEATURE_BLE_OAD)\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "ble_oad/oad_switch.h"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /* Header files required to enable instruction fetch cache */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <vims.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <hw_memmap.h>\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <ti/drivers/dpl/HwiP.h>\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "cpu.h"\cf0 \
\

\f1\b \cf1 #ifdef
\f0\b0 \cf3  NV_RESTORE\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "macconfig.h"\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "nvocmp.h"\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <string.h>\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 <assert.h>\cf0 \

\f1\b \cf1 #ifdef
\f0\b0 \cf3  OSAL_PORT2TIRTOS\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "macTask.h"\cf0 \

\f1\b \cf1 #else
\f0\b0 \cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "api_mac.h"\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "icall.h"\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "ssf.h"\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "sensor.h"\cf0 \
\

\f1\b \cf1 #ifndef
\f0\b0 \cf3  USE_DEFAULT_USER_CFG\cf0 \
\

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "mac_user_config.h"\cf0 \
\

\f1\b \cf1 #ifndef
\f0\b0 \cf3  CUI_DISABLE\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "cui.h"\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #ifdef
\f0\b0 \cf3  USE_ITM_DBG\cf0 \

\f1\b \cf1 #include
\f0\b0 \cf3  \cf4 "itm.h"\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /* MAC user defined configuration */\cf0 \
\pard\pardeftab720\partightenfactor0
\cf5 macUserCfg_t\cf3  macUser0Cfg[] = MAC_USER_CFG;\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf3  \cf2 /* USE_DEFAULT_USER_CFG */\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /******************************************************************************\cf0 \
\cf2  Constants\cf0 \
\cf2  *****************************************************************************/\cf0 \
\
\cf2 /* Assert Reasons */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 MAIN_ASSERT_MAC\cf3           3\cf0 \

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 MAIN_ASSERT_HWI_TIRTOS\cf3    4\cf0 \
\

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 MAX_ASSERT_TOGGLE_COUNT\cf3   500000\cf0 \
\

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 RFC_MODE_BLE\cf3                  PRCM_RFCMODESEL_CURR_MODE1\cf0 \

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 RFC_MODE_IEEE\cf3                 PRCM_RFCMODESEL_CURR_MODE2\cf0 \

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 RFC_MODE_ANT\cf3                  PRCM_RFCMODESEL_CURR_MODE4\cf0 \

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 RFC_MODE_EVERYTHING_BUT_ANT\cf3   PRCM_RFCMODESEL_CURR_MODE5\cf0 \

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 RFC_MODE_EVERYTHING\cf3           PRCM_RFCMODESEL_CURR_MODE6\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /* Extended Address offset in FCFG (LSB..MSB) */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 EXTADDR_OFFSET\cf3  0x2F0\cf0 \
\

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 APP_TASK_PRIORITY\cf3    1\cf0 \

\f1\b \cf1 #if
\f0\b0 \cf3  defined(DeviceFamily_CC13X2) || defined(DeviceFamily_CC26X2) || \\\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     defined(DeviceFamily_CC13X2X7) || defined(DeviceFamily_CC26X2X7) || \\\cf0 \
\cf3     defined(DeviceFamily_CC13X1) || defined(DeviceFamily_CC26X1) || \\\cf0 \
\cf3     defined(DeviceFamily_CC13X4) || defined(DeviceFamily_CC26X4) || defined(DeviceFamily_CC26X3)\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 APP_TASK_STACK_SIZE\cf3  2048\cf0 \

\f1\b \cf1 #else
\f0\b0 \cf0 \

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 APP_TASK_STACK_SIZE\cf3  900\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #define
\f0\b0 \cf3  \cf6 SET_RFC_MODE\cf3 (mode) HWREG( PRCM_BASE + PRCM_O_RFCMODESEL ) = (mode)\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /******************************************************************************\cf0 \
\cf2  External Variables\cf0 \
\cf2  *****************************************************************************/\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 extern
\f0\b0 \cf3  \cf5 ApiMac_sAddrExt_t\cf3  ApiMac_extAddr;\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /******************************************************************************\cf0 \
\cf2  Global Variables\cf0 \
\cf2  *****************************************************************************/\cf0 \
\pard\pardeftab720\partightenfactor0
\cf5 pthread_t\cf3  appThread;       \cf2 /* not static so you can see in ROV */\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifdef
\f0\b0 \cf3  OSAL_PORT2TIRTOS\cf0 \

\f1\b \cf1 static
\f0\b0 \cf3  uint8_t _macTaskId;\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /*\cf0 \
\cf2  When assert happens, this field will be filled with the reason:\cf0 \
\cf2        MAIN_ASSERT_HWI_TIRTOS or MAIN_ASSERT_MAC\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0
\cf5 uint8\cf3  
\f1\b \cf6 Main_assertReason
\f0\b0 \cf3  = \cf7 0\cf3 ;\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifdef
\f0\b0 \cf3  NV_RESTORE\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 mac_Config_t Main_user1Cfg = \{ \cf7 0\cf3  \};\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /******************************************************************************\cf0 \
\cf2  Local Variables\cf0 \
\cf2  *****************************************************************************/\cf0 \
\cf2 /* Used to check for a valid extended address */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 static
\f0\b0 \cf3  
\f1\b \cf1 const
\f0\b0 \cf3  uint8_t dummyExtAddr[] =\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \{ \cf7 0xFF\cf3 , \cf7 0xFF\cf3 , \cf7 0xFF\cf3 , \cf7 0xFF\cf3 , \cf7 0xFF\cf3 , \cf7 0xFF\cf3 , \cf7 0xFF\cf3 , \cf7 0xFF\cf3  \};\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 extern
\f0\b0 \cf3  
\f1\b \cf1 void
\f0\b0 \cf3  
\f1\b \cf6 Board_init
\f0\b0 \cf3 (
\f1\b \cf1 void
\f0\b0 \cf3 );\cf0 \
\

\f1\b \cf1 #ifdef
\f0\b0 \cf3  FREERTOS_SUPPORT\cf0 \

\f1\b \cf1 extern
\f0\b0 \cf3  
\f1\b \cf1 void
\f0\b0 \cf3  startRfCbThread(
\f1\b \cf1 void
\f0\b0 \cf3 );\cf0 \

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /*!\cf0 \
\cf2  * @brief       Reads the IEEE extended MAC address from the CCFG\cf0 \
\cf2  * @\ul param\ulnone        \ul addr\ulnone  - Extended address pointer\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 static
\f0\b0 \cf3  
\f1\b \cf1 inline
\f0\b0 \cf3  
\f1\b \cf1 void
\f0\b0 \cf3  
\f1\b \cf6 CCFGRead_IEEE_MAC
\f0\b0 \cf3 (\cf5 ApiMac_sAddrExt_t\cf3  \cf8 addr\cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \{\cf0 \
\cf3     uint32_t \cf6 macAddr\cf3  = (( HWREG(\cf0 \
\cf3             CCFG_BASE + CCFG_O_IEEE_MAC_0 ) &\cf0 \
\cf3             CCFG_IEEE_MAC_0_ADDR_M ) >>\cf0 \
\cf3             CCFG_IEEE_MAC_0_ADDR_S );\cf0 \
\cf3     
\f1\b \cf1 memcpy
\f0\b0 \cf3 (\cf8 addr\cf3 , (uint8_t *)&\cf8 macAddr\cf3 , (APIMAC_SADDR_EXT_LEN / \cf7 2\cf3 ));\cf0 \
\
\cf3     \cf8 macAddr\cf3  = (( HWREG(\cf0 \
\cf3             CCFG_BASE + CCFG_O_IEEE_MAC_1 ) &\cf0 \
\cf3             CCFG_IEEE_MAC_1_ADDR_M ) >>\cf0 \
\cf3             CCFG_IEEE_MAC_1_ADDR_S );\cf0 \
\cf3     
\f1\b \cf1 memcpy
\f0\b0 \cf3 (\cf8 addr\cf3  + (APIMAC_SADDR_EXT_LEN / \cf7 2\cf3 ), (uint8_t *)&\cf8 macAddr\cf3 ,\cf0 \
\cf3            (APIMAC_SADDR_EXT_LEN / \cf7 2\cf3 ));\cf0 \
\cf3 \}\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /*!\cf0 \
\cf2  * @brief       Fill in your own assert function.\cf0 \
\cf2  *\cf0 \
\cf2  * @\ul param\ulnone        assertReason - reason: MAIN_ASSERT_HWI_TIRTOS or\cf0 \
\cf2  *                                     MAIN_ASSERT_MAC\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 void
\f0\b0 \cf3  
\f1\b \cf6 Main_assertHandler
\f0\b0 \cf3 (uint8_t \cf8 assertReason\cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \{\cf0 \
\cf3     
\f1\b \cf1 Main_assertReason
\f0\b0 \cf3  = \cf8 assertReason\cf3 ;\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #if
\f0\b0 \cf3  defined(RESET_ASSERT)\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     Ssf_assertInd(assertReason);\cf0 \
\
\cf3     \cf2 /* Pull the plug and start over */\cf0 \
\cf3     SysCtrlSystemReset();\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #else
\f0\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf6 HwiP_disable
\f0\b0 \cf3 ();\cf0 \
\cf3     
\f1\b \cf1 while
\f0\b0 \cf3 (\cf7 1\cf3 )\cf0 \
\cf3     \{\cf0 \
\cf3         \cf2 /* Put you code here to do something if in assert */\cf0 \
\cf3     \}\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \}\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 void
\f0\b0 \cf3  *
\f1\b \cf6 appTaskFxn
\f0\b0 \cf3 (
\f1\b \cf1 void
\f0\b0 \cf3  *\cf8 arg0\cf3 );\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 /*!\cf0 \
\cf2  * @brief       Main task function\cf0 \
\cf2  *\cf0 \
\cf2  * @\ul param\ulnone        a0 -\cf0 \
\cf2  * @\ul param\ulnone        a1 -\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 void
\f0\b0 \cf3  *
\f1\b \cf6 appTaskFxn
\f0\b0 \cf3 (
\f1\b \cf1 void
\f0\b0 \cf3  *\cf8 arg0\cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \{\cf0 \
\cf3     \cf2 /* The following code encapsulated in TI_154STACK_FPGA flag is used for\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2      * internal FPGA evaluation of the 15.4 Stack and should not be used with\cf0 \
\cf2      * TI hardware platforms. */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifdef
\f0\b0 \cf3  TI_154STACK_FPGA\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* FPGA build disables POWER constraints */\cf0 \
\cf3     Power_setConstraint(PowerCC26XX_IDLE_PD_DISALLOW);\cf0 \
\cf3     Power_setConstraint(PowerCC26XX_SB_DISALLOW);\cf0 \
\
\cf3     IOCPortConfigureSet(IOID_29, IOC_PORT_RFC_GPO0, IOC_IOMODE_NORMAL);\cf0 \
\cf3     IOCPortConfigureSet(IOID_30, IOC_PORT_RFC_GPI0, IOC_INPUT_ENABLE);\cf0 \
\cf3     IOCPortConfigureSet(IOID_15, IOC_PORT_RFC_TRC, IOC_IOMODE_NORMAL);\cf0 \
\cf3     \cf2 // configure RF Core SMI Command Link\cf0 \
\cf3     IOCPortConfigureSet(IOID_22, IOC_IOCFG0_PORT_ID_RFC_SMI_CL_OUT, IOC_STD_OUTPUT);\cf0 \
\cf3     IOCPortConfigureSet(IOID_21, IOC_IOCFG0_PORT_ID_RFC_SMI_CL_IN, IOC_STD_INPUT);\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #ifndef
\f0\b0 \cf3  OSAL_PORT2TIRTOS\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Initialize ICall module */\cf0 \
\cf3     
\f1\b \cf1 ICall_init
\f0\b0 \cf3 ();\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Copy the extended address from the CCFG area */\cf0 \
\cf3     
\f1\b \cf1 CCFGRead_IEEE_MAC
\f0\b0 \cf3 (ApiMac_extAddr);\cf0 \
\
\cf3     \cf2 /* Check to see if the CCFG IEEE is valid */\cf0 \
\cf3     
\f1\b \cf1 if
\f0\b0 \cf3 (
\f1\b \cf1 memcmp
\f0\b0 \cf3 (ApiMac_extAddr, dummyExtAddr, APIMAC_SADDR_EXT_LEN) == \cf7 0\cf3 )\cf0 \
\cf3     \{\cf0 \
\cf3         \cf2 /* No, it isn't valid.  Get the Primary IEEE Address */\cf0 \
\cf3         
\f1\b \cf1 memcpy
\f0\b0 \cf3 (ApiMac_extAddr, (uint8_t *)(FCFG1_BASE + EXTADDR_OFFSET),\cf0 \
\cf3                (APIMAC_SADDR_EXT_LEN));\cf0 \
\cf3     \}\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifdef
\f0\b0 \cf3  NV_RESTORE\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Setup the NV driver */\cf0 \
\cf3     NVOCMP_loadApiPtrs(&Main_user1Cfg.nvFps);\cf0 \
\
\cf3     
\f1\b \cf1 if
\f0\b0 \cf3 (Main_user1Cfg.nvFps.initNV)\cf0 \
\cf3     \{\cf0 \
\cf3         Main_user1Cfg.nvFps.initNV( NULL);\cf0 \
\cf3     \}\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Initialize the application */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifdef
\f0\b0 \cf3  OSAL_PORT2TIRTOS\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     Sensor_init(_macTaskId);\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #else
\f0\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf1 ICall_createRemoteTasks
\f0\b0 \cf3 ();\cf0 \
\
\cf3     \cf2 /* Initialize the application */\cf0 \
\cf3     
\f1\b \cf1 Sensor_init
\f0\b0 \cf3 ();\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Kick off application - Forever loop */\cf0 \
\cf3     
\f1\b \cf1 while
\f0\b0 \cf3 (\cf7 1\cf3 )\cf0 \
\cf3     \{\cf0 \
\cf3         
\f1\b \cf1 Sensor_process
\f0\b0 \cf3 ();\cf0 \
\cf3     \}\cf0 \
\cf3 \}\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /*!\cf0 \
\cf2  * @brief       TIRTOS HWI Handler.  The name of this function is set to\cf0 \
\cf2  *              M3Hwi.excHandlerFunc in app.cfg, you can disable this by\cf0 \
\cf2  *              setting it to null.\cf0 \
\cf2  *\cf0 \
\cf2  * @\ul param\ulnone        excStack - uint32_t variable\cf0 \
\cf2  * @\ul param\ulnone        \ul lr\ulnone  - uint32_t variable\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 void
\f0\b0 \cf3  
\f1\b \cf6 Main_excHandler
\f0\b0 \cf3 (uint32_t *\cf8 excStack\cf3 , uint32_t \cf8 lr\cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \{\cf0 \
\cf3     \cf2 /* User defined function */\cf0 \
\cf3     
\f1\b \cf1 Main_assertHandler
\f0\b0 \cf3 (MAIN_ASSERT_HWI_TIRTOS);\cf0 \
\cf3 \}\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 /*!\cf0 \
\cf2  * @brief       HAL assert handler required by OSAL memory module.\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 void
\f0\b0 \cf3  
\f1\b \cf6 assertHandler
\f0\b0 \cf3 (
\f1\b \cf1 void
\f0\b0 \cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \{\cf0 \
\cf3     \cf2 /* User defined function */\cf0 \
\cf3     
\f1\b \cf1 Main_assertHandler
\f0\b0 \cf3 (MAIN_ASSERT_MAC);\cf0 \
\cf3 \}\cf0 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 /*!\cf0 \
\cf2  * @brief       "main()" function - starting point\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 int
\f0\b0 \cf3  
\f1\b \cf6 main
\f0\b0 \cf3 (
\f1\b \cf1 void
\f0\b0 \cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \{\cf0 \
\cf3     \cf5 pthread_attr_t\cf3       \cf6 attrs\cf3 ;\cf0 \
\cf3     
\f1\b \cf1 struct
\f0\b0 \cf3  \cf5 sched_param\cf3   \cf6 priParam\cf3 ;\cf0 \
\cf3     
\f1\b \cf1 int
\f0\b0 \cf3                  \cf6 retc\cf3 ;\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifndef
\f0\b0 \cf3  USE_DEFAULT_USER_CFG\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     macUser0Cfg[\cf7 0\cf3 ].\cf6 pAssertFP\cf3  = 
\f1\b \cf1 assertHandler
\f0\b0 \cf3 ;\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /*\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2      Initialization for board related stuff such as LEDs\cf0 \
\cf2      following TI-RTOS convention\cf0 \
\cf2      */\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf1 Board_init
\f0\b0 \cf3 ();\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #if
\f0\b0 \cf3  defined(FEATURE_BLE_OAD) && !defined(OAD_IMG_A)\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* If FEATURE_BLE_OAD is enabled, look for a left button\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2      *  press on reset. This indicates to revert to some\cf0 \
\cf2      *  factory image\cf0 \
\cf2      */\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf1 if
\f0\b0 \cf3 (!GPIO_read(CONFIG_GPIO_BTN1))\cf0 \
\cf3     \{\cf0 \
\cf3         OAD_markSwitch();\cf0 \
\cf3     \}\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf3  \cf2 /* FEATURE_BLE_OAD */\cf0 \
\

\f1\b \cf1 #if
\f0\b0 \cf3  (defined(FEATURE_BLE_OAD) || defined(FEATURE_NATIVE_OAD)) && !defined(OAD_ONCHIP)\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     SPI_init();\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #if
\f0\b0 \cf3  !defined(POWER_MEAS) && !defined(CUI_DISABLE)\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Initialize CUI UART */\cf0 \
\cf3     \cf5 CUI_params_t\cf3  \cf6 cuiParams\cf3 ;\cf0 \
\cf3     
\f1\b \cf1 CUI_paramsInit
\f0\b0 \cf3 (&\cf8 cuiParams\cf3 );\cf0 \
\
\cf3     \cf2 // One-time initialization of the CUI\cf0 \
\
\cf3     \cf2 // All later CUI_* functions will be ignored if this isn't called\cf0 \
\cf3     
\f1\b \cf1 CUI_init
\f0\b0 \cf3 (&\cf8 cuiParams\cf3 );\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\

\f1\b \cf1 #ifdef
\f0\b0 \cf3  OSAL_PORT2TIRTOS\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     _macTaskId = macTaskInit(macUser0Cfg);\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf3     \cf2 /* Initialize the attributes structure with default values */\cf0 \
\cf3     
\f1\b \cf6 pthread_attr_init
\f0\b0 \cf3 (&\cf8 attrs\cf3 );\cf0 \
\
\cf3     \cf2 /* Set priority, detach state, and stack size attributes */\cf0 \
\cf3     \cf8 priParam\cf3 .\cf6 sched_priority\cf3  = APP_TASK_PRIORITY;\cf0 \
\cf3     \cf8 retc\cf3  = 
\f1\b \cf6 pthread_attr_setschedparam
\f0\b0 \cf3 (&\cf8 attrs\cf3 , &\cf8 priParam\cf3 );\cf0 \
\cf3     \cf8 retc\cf3  |= 
\f1\b \cf6 pthread_attr_setdetachstate
\f0\b0 \cf3 (&\cf8 attrs\cf3 , PTHREAD_CREATE_DETACHED);\cf0 \
\cf3     \cf8 retc\cf3  |= 
\f1\b \cf6 pthread_attr_setstacksize
\f0\b0 \cf3 (&\cf8 attrs\cf3 , APP_TASK_STACK_SIZE);\cf0 \
\cf3     
\f1\b \cf1 if
\f0\b0 \cf3  (\cf8 retc\cf3  != \cf7 0\cf3 ) \{\cf0 \
\cf3         \cf2 /* failed to set attributes */\cf0 \
\cf3         
\f1\b \cf1 while
\f0\b0 \cf3  (\cf7 1\cf3 ) \{\}\cf0 \
\cf3     \}\cf0 \
\
\cf3     \cf8 retc\cf3  = 
\f1\b \cf6 pthread_create
\f0\b0 \cf3 (&appThread, &\cf8 attrs\cf3 , 
\f1\b \cf1 appTaskFxn
\f0\b0 \cf3 , NULL);\cf0 \
\cf3     
\f1\b \cf1 if
\f0\b0 \cf3  (\cf8 retc\cf3  != \cf7 0\cf3 ) \{\cf0 \
\cf3         \cf2 /* pthread_create() failed */\cf0 \
\cf3         
\f1\b \cf1 while
\f0\b0 \cf3  (\cf7 1\cf3 ) \{\}\cf0 \
\cf3     \}\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #ifdef
\f0\b0 \cf3  USE_ITM_DBG\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     ITM_config itm_config =\cf0 \
\cf3     \{\cf0 \
\cf3       \cf7 48000000\cf3 ,\cf0 \
\cf3       ITM_6000000\cf0 \
\cf3     \};\cf0 \
\cf3     ITM_initModule(itm_config);\cf0 \
\cf3     ITM_enableModule();\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf3  \cf2 /* USE_ITM_DBG */\cf0 \
\

\f1\b \cf1 #ifdef
\f0\b0 \cf3  FREERTOS_SUPPORT\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     startRfCbThread();\cf0 \
\cf3     \cf2 /* Start the FreeRTOS scheduler */\cf0 \
\cf3     vTaskStartScheduler();\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #else
\f0\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf6 BIOS_start
\f0\b0 \cf3 (); \cf2 /* enable interrupts and start SYS/BIOS */\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf1 #endif
\f0\b0 \cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf3     
\f1\b \cf1 return
\f0\b0 \cf3  (\cf7 0\cf3 );\cf0 \
\cf3 \}\cf0 \
\
}